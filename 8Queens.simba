program Queens;

Type
  T3DIntegerArray = Array of T2DIntegerArray;
  T4DIntegerArray = Array of T3DIntegerArray;

var
  Timer: Integer;

Procedure ColumnRowCheck(var TheBoard: TIntegerArray);

var
  x, i: integer;

begin
  for x := 0 to 63 do
  if TheBoard[x] = 1 then
  begin
    i := x;

    // Check Row Up
    repeat
      Inc(I);
      if I < 64 then
        TheBoard[i] := -1;
    until (I >= 64) or ((I mod 8) = 7);

    i := x;

    // Check Row Down
    repeat
      Dec(I);
      if I > -1 then
        TheBoard[i] := -1;
    until (I <= 0) or ((I mod 8) = 0);

    i := x;

    //Check Column
    while (i > 7) do
      DecEx(I, 8);

    while I < 64 do
    begin
      if (I <> x) then
        TheBoard[i] := -1;
      IncEx(I, 8);
    end;
  end;
end;

Procedure DiagonalCheck(var TheBoard: TIntegerArray);

var
  x, i: integer;

begin
  for x := 0 to 63 do
  if TheBoard[x] = 1 then
  begin
    i := x;

    // Up, Right
    repeat
      IncEx(I, 9);
      if I < 64 then
        TheBoard[i] := -1;
    until (I >= 64) or ((I mod 8) = 7);

    i := x;

    // Down, Left
    repeat
      DecEx(I, 9);
      if I > -1 then
        TheBoard[i] := -1;
    until (I <= 0) or ((I mod 8) = 0);

    i := x;

    // Up, Left
    while (not ((I mod 8) = 0)) and (I < 64) do
    begin
      IncEx(I, 7);
      if I < 63 then
        TheBoard[i] := -1;
    end;

    i := x;

    // Down, Right
    repeat
      DecEx(I, 9);
      if I > -1 then
        TheBoard[i] := -1;
    until (I <= 0) or ((I mod 8) = 7);
  end;
end;

procedure CopyIntArr(const Src: TIntegerArray; out Dest: TIntegerArray);
var
  I, H: LongInt;
begin
  H := Length(Src);
  SetLength(Dest, H);
  Dec(H);
  for I := 0 to H do
    Dest[I] := Src[I];
end;

procedure Copy2DIntArr(const Src: T2DIntegerArray; out Dest: T2DIntegerArray);
var
  I, H: LongInt;
begin
  H := Length(Src);
  SetLength(Dest, H);
  Dec(H);
  for I := 0 to H do
    CopyIntArr(Src[I], Dest[I]);
end;

procedure Copy3DIntArr(const Src: T3DIntegerArray; out Dest: T3DIntegerArray);
var
  I, H: LongInt;
begin
  H := Length(Src);
  SetLength(Dest, H);
  Dec(H);
  for I := 0 to H do
    Copy2DIntArr(Src[I], Dest[I]);
end;

Procedure Main;

var
  Board: TIntegerArray;
  BArray: T2DIntegerArray;
  B2DArray: T3DIntegerArray;
  B3DArray: T4DIntegerArray;
  Index, Queen, X, I, I2: integer;

begin
  for Queen := 0 to 3 do
  case Queen of
    0:
    begin
      Writeln('Queen ' + ToStr(Queen));
      for x := 0 to 0 do //Only working on (0,0) for now.
      begin
        SetLength(Board, 64);
        Board[x] := 1;
        ColumnRowCheck(Board);
        DiagonalCheck(Board);
      end;
      Writeln(ToStr(GetSystemTime - Timer) + 'ms');
    end;

    1:
    begin
      Writeln('Queen ' + ToStr(Queen));
      for x := 0 to 63 do
      if Board[x] = 0 then
      begin
        Setlength(BArray, Length(BArray) + 1);
        index := High(BArray);
        CopyIntArr(Board, BArray[index]);
        BArray[index][x] := 1;
        ColumnRowCheck(BArray[index]);
        DiagonalCheck(BArray[index]);
      end;
      Writeln(ToStr(GetSystemTime - Timer) + 'ms');
    end;

    2:
    begin
      Writeln('Queen ' + ToStr(Queen));
      for I := 0 to High(BArray) do
        for x := 0 to 63 do
        if BArray[I][x] = 0 then
        begin
          Setlength(B2DArray, Length(B2DArray) + 1);
          Index := High(B2DArray);
          Copy2DIntArr(BArray, B2DArray[Index]);
          B2DArray[Index][I][x] := 1;
          ColumnRowCheck(B2DArray[Index][I]);
          DiagonalCheck(B2DArray[Index][I]);
        end;
      Writeln(ToStr(GetSystemTime - Timer) + 'ms');
    end;

    3:
    begin
      Writeln('Queen ' + ToStr(Queen));
      for I2 := 0 to High(B2DArray) do
        for I := 0 to High(B2DArray[I]) do
          for x := 0 to 63 do
          if B2DArray[I2][I][x] = 0 then
          begin
            Setlength(B3DArray, Length(B3DArray) + 1);
            Index := High(B3DArray);
            Copy3DIntArr(B2DArray, B3DArray[Index]);
            B3DArray[Index][I2][I][x] := 1;
            ColumnRowCheck(B3DArray[Index][I2][I]);
            DiagonalCheck(B3DArray[Index][I2][I]);
          end;
      Writeln(ToStr(GetSystemTime - Timer) + 'ms');
    end;
  end;
end;

begin
  ClearDebug;
  Timer := GetSystemTime;
  Main;
end.
