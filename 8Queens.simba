program Queens;

Type
  T3DIntegerArray = Array of T2DIntegerArray;
  T4DIntegerArray = Array of T3DIntegerArray;

var
  Timer: Integer;

Function NullPoint: TPoint;

begin
  Result := Point(-1,-1);
end;

Function FullBoard: T2DIntegerArray;

var
  x,y: Integer;

begin
  for x := 0 to 7 do
    for y := 0 to 7 do
    begin
      SetLength(Result, x + 1);
      SetLength(Result[x], y + 1);
      Result[x][y] := 0;
    end;
end;

Function ColumnRowCheck(var TheBoard: T2DIntegerArray): Boolean;

var
  x, y, x2, y2, i: integer;

begin
  Result := True;

  for x := 0 to 7 do
    for y := 0 to 7 do
    begin
      //Writeln('(' + tostr(x) + ',' + tostr(y) + ')');
      if TheBoard[x][y] = 1 then
      begin
        //Hold These Values
        y2 := y;
        x2 := x;

        //Check Row
        for i := x to x do
          for y := 0 to 7 do
          begin
            //Writeln(tostr(BoardA[i][y]));
            //if (TheBoard[i][y] = 1) and (not((i = x) and (y = y2))) then

            if TheBoard[i][y] = 0 then
              TheBoard[i][y] := -1;
          end;

        //Reinstate Original Y value
        y := y2;

        //Check Column
        for x := 0 to 7 do
          if TheBoard[x][y] = 0 then
            TheBoard[x][y] := -1;

        //Reinstate Original X value
        x := x2;
      end;
    end;
end;

Procedure DiagonalCheck(var TheBoard: T2DIntegerArray);

var
  x, y, x2, y2: integer;

begin
  for x := 0 to 7 do
    for y := 0 to 7 do
    begin
      //Writeln('(' + tostr(x) + ',' + tostr(y) + ')');
      if TheBoard[x][y] = 1 then
      begin
        //Hold These Values
        y2 := y;
        x2 := x;

        while (not ((x = 7) or (y = 7))) do
        begin
          Inc(x);
          Inc(y);
          TheBoard[x][y] := -1;
        end;

        //Reinstate Values
        y := y2;
        x := x2;

        while (not ((x = 0) or (y = 0))) do
        begin
          Dec(x);
          Dec(y);
          TheBoard[x][y] := -1;
        end;

        //Reinstate Values
        y := y2;
        x := x2;

        while (not ((x = 7) or (y = 0))) do
        begin
          Inc(x);
          Dec(y);
          TheBoard[x][y] := -1;
        end;

        //Reinstate Values
        y := y2;
        x := x2;

        while (not ((x = 0) or (y = 7))) do
        begin
          Dec(x);
          Inc(y);
          TheBoard[x][y] := -1;
        end;

        //Reinstate Values
        y := y2;
        x := x2;
      end;
    end;
end;

Function AvailableMoves(TheBoard: T2DIntegerArray; Max: Integer): boolean;

var
  x,y, I: Integer;

begin
  Result := False;
  I := 0;
  for x := 0 to 7 do
    for y := 0 to 7 do
    begin
      if TheBoard[x][y] = 0 then
        if Max = 0 then
          Exit
        else
          Inc(I);
      Result := (I >= Max);
      if Result then
        Exit;
    end;
end;

procedure CopyIntArr(const Src: TIntegerArray; out Dest: TIntegerArray);
var
  I, H: LongInt;
begin
  H := Length(Src);
  SetLength(Dest, H);
  Dec(H);
  for I := 0 to H do
    Dest[I] := Src[I];
end;

procedure Copy2DIntArr(const Src: T2DIntegerArray; out Dest: T2DIntegerArray);
var
  I, H: LongInt;
begin
  H := Length(Src);
  SetLength(Dest, H);
  Dec(H);
  for I := 0 to H do
    CopyIntArr(Src[I], Dest[I]);
end;

procedure Copy3DIntArr(const Src: T3DIntegerArray; out Dest: T3DIntegerArray);
var
  I, H: LongInt;
begin
  H := Length(Src);
  SetLength(Dest, H);
  Dec(H);
  for I := 0 to H do
    Copy2DIntArr(Src[I], Dest[I]);
end;

Procedure Main;

var
  VarX, VarY: TIntegerArray;
  Board: T2DIntegerArray;
  BArray: T3DIntegerArray;
  B2DArray: T4DIntegerArray;
  Index, Queen, I: integer;

begin
  SetLength(VarX, 3);
  SetLength(VarY, 3);
  for Queen := 0 to 2 do
  case Queen of
    0:
    begin
      Writeln('Queen ' + ToStr(Queen));
      for VarX[Queen] := 0 to 0 do
        for VarY[Queen] := 0 to 0 do
        begin
          Board := FullBoard;
          Board[VarX[Queen]][VarY[Queen]] := 1;
          ColumnRowCheck(Board);
          DiagonalCheck(Board);
        end;
      Writeln(ToStr(GetSystemTime - Timer) + 'ms');
    end;

    1:
    begin
      Writeln('Queen ' + ToStr(Queen));
      for VarX[Queen] := 0 to 7 do
        for VarY[Queen] := 0 to 7 do
        begin
          //Writeln('(' + tostr(VarX[Queen]) + ',' + tostr(VarY[Queen]) + ')');
          if Board[VarX[Queen]][VarY[Queen]] = 0 then
          begin
            Setlength(BArray, Length(BArray) + 1);
            index := High(BArray);
            Copy2DIntArr(Board, BArray[index]);
            BArray[index][VarX[Queen]][VarY[Queen]] := 1;
            ColumnRowCheck(BArray[index]);
            DiagonalCheck(BArray[index]);
            //Writeln(ToStr(BArray[index]));
            //Writeln(tostr(index));
          end;
        end;
      Writeln(ToStr(GetSystemTime - Timer) + 'ms');
    end;

    2:
    begin
      Writeln('Queen ' + ToStr(Queen));
      for I := 0 to High(BArray) do
        for VarX[Queen] := 0 to 7 do
          for VarY[Queen] := 0 to 7 do
          begin
            //Writeln('(' + tostr(VarX[Queen]) + ',' + tostr(VarY[Queen]) + ')');
            if BArray[I][VarX[Queen]][VarY[Queen]] = 0 then
            begin
              Setlength(B2DArray, Length(B2DArray) + 1);
              Index := High(B2DArray);
              Copy3DIntArr(BArray, B2DArray[Index]);
              B2DArray[Index][I][VarX[Queen]][VarY[Queen]] := 1;
              ColumnRowCheck(B2DArray[Index][I]);
              DiagonalCheck(B2DArray[Index][I]);
              //Writeln(ToStr(BArray[index]));
              //Writeln(tostr(index));
            end;
          end;
    //Writeln(tostr(B2DArray));
    end;
    //Writeln(ToStr(BoardA));
  end;
end;

begin
  ClearDebug;
  Timer := GetSystemTime;
  FullBoard;
  Main;
  Writeln(ToStr(GetSystemTime - Timer) + 'ms');
end.
