program Queens;

var
  Timer: Integer;

Function RemovePosInArr(Position: Integer; Arr: TIntegerArray): TIntegerArray;

var
  TmpArr: TIntegerArray;
  I: Integer;

begin
  for I := 0 to High(Arr) do
    if I <> Position then
    begin
      SetLength(TmpArr, Length(TmpArr) + 1);
      TmpArr[High(TmpArr)] := Arr[I];
    end;

  Result := TmpArr;
end;

Function BCheck(TheBoard: TIntegerArray): Boolean;

var
  I: integer;

begin
  while (Length(TheBoard) > 1) do
  begin

    {Column}

    I := TheBoard[0];

    while (I > 7) do
      I := I - 8;

    while (I < 64) do
    begin
      if (I <> TheBoard[0]) and InIntArray(TheBoard, I) then
      begin
        Result := False;
        Exit;
      end;
      I := I + 8;
    end;

    {Diagonal}

    I := TheBoard[0];

    // Up, Right
    while (I < 55) and ((I mod 8) <> 7) do
    begin
      I := I + 9;
      if InIntArray(TheBoard, I) then
      begin
        Result := False;
        Exit;
      end;
    end;

    I := TheBoard[0];

    // Up, Left
    while (I < 56) and ((I mod 8) <> 0) do
    begin
      I := I + 7;
      if InIntArray(TheBoard, I) then
      begin
        Result := False;
        Exit;
      end;
    end;

    TheBoard := RemovePosInArr(0, TheBoard);
  end;
  Result := True;
end;

Procedure Main;

var
  Board: TIntegerArray;
  BArray: T2DIntegerArray;
  X, Y, NewI, I4, Position, Time: integer;

begin
  NewI := 0;
  I4 := 0;
  repeat
    for X := NewI to 7 do
    begin
      for Y := I4 to 7 do
      begin
        I4 := 0;
        SetLength(Board, X + 1);
        Board[X] := (X * 8) + Y;
        if BCheck(Board) then
          Break;
      end;
      if Y = 8 then
        Break;
    end;
    if X = 8 then
    begin
      SetLength(BArray, Length(BArray) + 1);
      BArray[High(BArray)] := Board;
      //Writeln('I: ' + ToStr(High(Barray)));
      Y := 8;
    end;
    if Y = 8 then
    begin
      NewI := X - 1;//pos that doesnt work
      if NewI < 0 then Break;
      I4 := Board[newi] - (newi * 8) + 1;//sub location that doesnt work
      for Position := High(Board) downto NewI do
        Board := RemovePosInArr(Position, Board);
    end else
      I4 := 0;
  until False;
  Time := GetTickCount - Timer;
  Writeln('Number of Solutions: ' + ToStr(Length(BArray)));
  for X := 0 to High(BArray) do
    Writeln(ToStr(X) + ': ' + ToStr(BArray[X]));
  Writeln('Time Taken: ' + ToStr(Time) + 'ms');
end;

begin
  ClearDebug;
  Timer := GetTickCount;
  Main;
end.
